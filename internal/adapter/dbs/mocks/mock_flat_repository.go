// Code generated by MockGen. DO NOT EDIT.
// Source: flat_repository.go

// Package mock_dbs is a generated GoMock package.
package mock_dbs

import (
	model "houseService/internal/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFlatRepository is a mock of FlatRepository interface.
type MockFlatRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFlatRepositoryMockRecorder
}

// MockFlatRepositoryMockRecorder is the mock recorder for MockFlatRepository.
type MockFlatRepositoryMockRecorder struct {
	mock *MockFlatRepository
}

// NewMockFlatRepository creates a new mock instance.
func NewMockFlatRepository(ctrl *gomock.Controller) *MockFlatRepository {
	mock := &MockFlatRepository{ctrl: ctrl}
	mock.recorder = &MockFlatRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFlatRepository) EXPECT() *MockFlatRepositoryMockRecorder {
	return m.recorder
}

// FlatCreate mocks base method.
func (m *MockFlatRepository) FlatCreate(arg0 *model.Flat) (*model.Flat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlatCreate", arg0)
	ret0, _ := ret[0].(*model.Flat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlatCreate indicates an expected call of FlatCreate.
func (mr *MockFlatRepositoryMockRecorder) FlatCreate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlatCreate", reflect.TypeOf((*MockFlatRepository)(nil).FlatCreate), arg0)
}

// FlatUpdate mocks base method.
func (m *MockFlatRepository) FlatUpdate(update *model.Flat) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlatUpdate", update)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlatUpdate indicates an expected call of FlatUpdate.
func (mr *MockFlatRepositoryMockRecorder) FlatUpdate(update interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlatUpdate", reflect.TypeOf((*MockFlatRepository)(nil).FlatUpdate), update)
}

// GetFlatById mocks base method.
func (m *MockFlatRepository) GetFlatById(id int) (*model.Flat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFlatById", id)
	ret0, _ := ret[0].(*model.Flat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFlatById indicates an expected call of GetFlatById.
func (mr *MockFlatRepositoryMockRecorder) GetFlatById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlatById", reflect.TypeOf((*MockFlatRepository)(nil).GetFlatById), id)
}

// HouseFlatsGet mocks base method.
func (m *MockFlatRepository) HouseFlatsGet(arg0 int, arg1 string) ([]*model.Flat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HouseFlatsGet", arg0, arg1)
	ret0, _ := ret[0].([]*model.Flat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HouseFlatsGet indicates an expected call of HouseFlatsGet.
func (mr *MockFlatRepositoryMockRecorder) HouseFlatsGet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HouseFlatsGet", reflect.TypeOf((*MockFlatRepository)(nil).HouseFlatsGet), arg0, arg1)
}
